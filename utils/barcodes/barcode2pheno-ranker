#!/usr/bin/env python3
#
#   A script that reads 2D-barcodes (QR) and decodes to the original data
#
#   Last Modified: Dec/01/2023
#
#   Version 0.00
#
#   Copyright (C) 2023 Manuel Rueda - CNAG (manuel.rueda@cnag.crg.eu)
#
#   License: Artistic License 2.0
#
#   If this program helps you in your research, please cite.

import argparse
import json
from PIL import Image
from pyzbar.pyzbar import decode
import glob
import re

def load_json_template(json_file):
    with open(json_file, 'r') as file:
        return json.load(file)

def extract_qr_code_data(input_files, json_template, save_intermediate):
    results = []
    
    for filepath in input_files:
        if filepath.endswith('.png'):
            try:
                data = decode(Image.open(filepath))
                if data:
                    binary_string = data[0].data.decode()
                    result = decode_binary_string(binary_string, json_template)
                    if save_intermediate:
                        save_intermediate_output(result, filepath)
                    results.append(result)
                else:
                    print(f"No QR code found in {filepath}")
            except Exception as e:
                print(f"Error decoding {filepath}: {e}")

    return results

def decode_binary_string(binary_string, json_template):
    keys = list(json_template.keys())
    decoded_data = {}

    for i, bit in enumerate(binary_string):
        if i < len(keys) and bit == '1':
            full_key = keys[i]
            *key_parts, value = full_key.split('.')
            key = '.'.join(key_parts)
            decoded_data[key] = value

    return decoded_data

def unflatten(dictionary):
    result = {}
    for key, value in dictionary.items():
        parts = key.split('.')
        d = result
        for part in parts[:-1]:
            if part not in d:
                d[part] = {}
            d = d[part]
        d[parts[-1]] = value
    return result

def convert_curie_objects_to_array(data):
    def is_curie(key):
        return re.match(r'^\w+:[^:]+$', key)

    def recursive_convert(obj):
        if isinstance(obj, dict):
            curie_keys = [key for key in obj if is_curie(key) and isinstance(obj[key], dict)]
            if curie_keys:
                array = [obj[key] for key in curie_keys]
                for key in curie_keys:
                    del obj[key]
                non_curie_keys = set(obj.keys()) - set(curie_keys)
                if non_curie_keys:
                    return {**obj, 'array': array}
                else:
                    return array
            else:
                for key in obj:
                    obj[key] = recursive_convert(obj[key])
        return obj

    return recursive_convert(data)

def save_intermediate_output(data, filepath):
    intermediate_file = f"{filepath}_intermediate.json"
    with open(intermediate_file, 'w') as file:
        json.dump(data, file, indent=4)
    print(f"Intermediate data saved to {intermediate_file}")

def main():
    parser = argparse.ArgumentParser(description='Decode QR codes to JSON format.')
    parser.add_argument('-i', '--input', nargs='+', required=True, help='Input PNG files (e.g., "image1.png image2.png")')
    parser.add_argument('-t', '--template', required=True, help='JSON template file')
    parser.add_argument('-o', '--output', default='individuals.json', help='Final output file (default: individuals.json)')
    parser.add_argument('--save-intermediate', action='store_true', help='Save intermediate output for each QR code')

    args = parser.parse_args()
    json_template = load_json_template(args.template)
    decoded_data = extract_qr_code_data(args.input, json_template, args.save_intermediate)

    preprocessed_data = [unflatten(item) for item in decoded_data]
    final_data = [convert_curie_objects_to_array(item) for item in preprocessed_data]

    with open(args.output, 'w') as file:
        json.dump(final_data, file, indent=4)

    print(f"Final processed data saved to {args.output}")

if __name__ == "__main__":
    main()
