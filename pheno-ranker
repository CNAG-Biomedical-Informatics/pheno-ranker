#!/usr/bin/env perl
#
#   A script that ranks individuals against a cohort (BFF)
#
#   Last Modified: Apr/18/2023
#
#   Version 1.0.0
#
#   Copyright (C) 2023 Manuel Rueda - CNAG (manuel.rueda@cnag.crg.eu)
#
#   License: Artistic License 2.0
#
#   If this program helps you in your research, please cite.

use strict;
use warnings;
use autodie;
use feature      qw(say);
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use Data::Dumper;
use Sys::Hostname;
use File::Spec::Functions qw(catdir catfile);
use POSIX           qw(strftime);
use Term::ANSIColor qw(:constants);
use FindBin         qw($Bin);
use lib "$Bin/lib";
use Pheno::Ranker qw($VERSION write_json);

##### Main #####
pheno_ranker();
################
exit;

sub pheno_ranker {

    # Defining a few variables
    my $out_file       = 'matrix.txt';
    my $align_basename = 'alignment';
    my $log_file       = 'pheno-ranker-log.json';
    my $color          = 1;
    my $age            = 0;

    # Reading arguments
    GetOptions(
        'reference|r=s'          => \my $reference_file,                       # string
        'target|t=s'             => \my $target_file,                          # string
        'weights|w=s'            => \my $weights_file,                         # string
        'o=s'                    => \$out_file,                                # string
        'max-out:i'              => \my $max_out,                              # integer
        'include-hpo-ascendants' => \my $include_hpo_ascendants,               # flag
        'export|e'               => \my $export,                               # flag
        'align:s'                => \my $align,                                # opt-string (defined)
        'sort-by=s'              => \my $sort_by,                              # string
        'include-terms=s{1,11}'  => \my @include_terms,                        # array
        'exclude-terms=s{1,11}'  => \my @exclude_terms,                        # array
        'config=s'               => \my $config_file,                             # string
        'age!'                   => \$age,                                     # flag
        'help|?'                 => \my $help,                                 # flag
        'log:s'                  => \my $log,                                  # opt-string (defined)
        'man'                    => \my $man,                                  # flag
        'debug=i'                => \my $debug,                                # integer
        'verbose|'               => \my $verbose,                              # flag
        'color!'                 => \$color,                                   # flag
        'version|V'              => sub { say "$0 Version $VERSION"; exit; }
    ) or pod2usage(2);
    pod2usage(1)                              if $help;
    pod2usage( -verbose => 2, -exitval => 0 ) if $man;
    pod2usage(
        -message => "Please specify a valid reference-cohort for -r\n",
        -exitval => 1
    ) unless $reference_file;

    # Turning color off if argument <--no-color>
    $ENV{'ANSI_COLORS_DISABLED'} = 1 unless $color;

    # Start printing to STDOUT
    say BOLD CYAN program_header($VERSION), RESET if $verbose;

    ######################
    # START PHENO-RANKER #
    ######################

    # Load data as hashref
    my $data = {
        reference_file         => $reference_file,
        target_file            => $target_file,
        weights_file           => $weights_file,
        include_hpo_ascendants => $include_hpo_ascendants,
        hpo_file               => undef,
        align                  => $align,
        align_basename         => $align_basename,
        export                 => $export,
        out_file               => $out_file,
        max_out                => $max_out,
        sort_by                => $sort_by,
        include_terms          => \@include_terms,
        exclude_terms          => \@exclude_terms,
        config_file            => $config_file,
        age                    => $age,
        log                    => $log,
        debug                  => $debug,
        verbose                => $verbose
    };

    # Create object
    my $ranker = Pheno::Ranker->new($data);

    # Run method
    $ranker->run();

    # Create log if <--log>
    write_log( $log ? $log : $log_file, $data, $VERSION )
      if defined $log;

    ####################
    # END PHENO-RANKER #
    ####################
}

sub write_log {

    my ( $log, $data, $VERSION ) = @_;

    # NB: We will use anonymous (no effect on $data)
    chomp( my $ncpuhost = qx{/usr/bin/nproc} ) // 1;

    my $info = {
        date     => ( strftime "%a %b %e %H:%M:%S %Y", localtime ),
        ncpuhost => ( 0 + $ncpuhost ),                                # coercing it to be a number
        hostname => hostname,
        id       => time . substr( "00000$$", -5 ),                   # string
        version  => $VERSION,
        user     => $ENV{LOGNAME} || $ENV{USER} || getpwuid($<)
    };

    # Saving file
    say BOLD GREEN "Writing <$log> file\n" if $data->{verbose};
    write_json(
        {
            filepath => $log,
            data     => { info => $info, data => $data }
        }
    );
}

sub program_header {

    my $VERSION = shift;
    my $str     = <<EOF;
****************************************
*    Rank against cohort (BFF/PXF)     *
*          - PHENO-RANKER -            *
*          Version: $VERSION              *
*      (C) 2023 Manuel Rueda, PhD      *
*       The Artistic License 2.0       *
****************************************
EOF
    return $str;
}

=head1 NAME

pheno-ranker: A script that compares a given BFF/PXF file against a BFF/PXF cohort

=head1 SYNOPSIS


pheno-ranker -r <individuals.json> -t <patient.json> [-options]

     Arguments:                       
       -r|reference-file              BFF/PXF file (JSON|YAML array)
       -t|target-file                 BFF/PXF file (JSON|YAML object or array with 1 object)

     Options:
       -age                           Include age-related variables [>no-age|age]
       -align                         Write alignment file(s). If no argument is given the files will be named [alignment.*]
       -config                        YAML config file to change default parameters [conf/config.yaml)
       -e|export                      Export miscellanea JSON files
       -exclude-terms                 Exclude BFF/PXF terms (e.g., --exclude-terms sex id)
       -include-hpo-ascendants        Include ascendant terms from the Human Phenotype Ontology (HPO)
       -include-terms                 Include BFF/PXF terms (e.g., --ixclude-terms diseases)
       -max-out                       Print only N of comparisons (used with --t)  [50]
       -o                             Output file [matrix.txt]
       -sort-by                       Sort reference-patient comparison by Hamming-distance or Jaccard-index [>hamming|jaccard]
       -w|weights                     YAML file with weights

     Generic Options:
       -debug                         Print debugging (from 1 to 5, being 5 max)
       -h|help                        Brief help message
       -log                           Save log file (JSON). If no argument is given then the log is named [pheno-ranker-log.json]
       -man                           Full documentation
       -no-color                      Don't print colors to STDOUT [>color|no-color]
       -v|verbose                     Verbosity on
       -V|version                     Print version


=head1 DESCRIPTION

pheno-ranker: A script that compares a given BFF/PXF file against a BFF/PXF cohort

=head1 SUMMARY

pheno-ranker: A script that compares and ranks (by dissimilarity) a given BFF/PXF file against a BFF/PXF cohort

=head1 INSTALLATION

 $ cpanm sudo --installdeps .

=head3 System requirements

  * Ideally a Debian-based distribution (Ubuntu or Mint), but any other (e.g., CentOs, OpenSuse) should do as well.
  * Perl 5 (>= 5.10 core; installed by default in most Linux distributions). Check the version with "perl -v"
  * 1GB of RAM.
  * 1 core (it only uses one core per job).
  * At least 1GB HDD.

=head1 HOW TO RUN PHENO-RANKER

For executing pheno-ranker you will need:

=over

=item Input file(s):
      
A PXF or BFF file(s) in JSON format. The reference cohort must be a JSON array, where each individual data are consolidated in one object. 

If no C<--t> argument is provided then it will compute intra-cohort comparison only. If C<--t> argument is provided then the target JSON will be compared against the C<-r> reference cohort.

=back

B<Examples:>

 $ ./pheno-ranker -r phenopackets.json  # intra-cohort

 $ ./pheno-ranker -r phenopackets.yaml -o my_matrix.txt # intra-cohort

 $ ./pheno-ranker -r phenopackets.json -w weights.yaml --exclude-terms sex ethnicity exposures # intra-cohort with weights

 $ $path/pheno-ranker -r individuals.json -t patient.yaml -max-out 100 # patient-cohort

=head2 COMMON ERRORS AND SOLUTIONS

 * Error message: Foo
   Solution: Bar

 * Error message: Foo
   Solution: Bar

=head1 AUTHOR 

Written by Manuel Rueda, PhD. Info about CNAG can be found at L<https://www.cnag.crg.eu>.

=head1 COPYRIGHT AND LICENSE

This PERL file is copyrighted. See the LICENSE file included in this distribution.

=cut
